from flask import Flask, render_template, request
from chatterbot import ChatBot
from chatterbot.trainers import ListTrainer
from fuzzywuzzy import fuzz
import emoji
from difflib import SequenceMatcher
from pymongo import MongoClient

client = MongoClient('mongodb://localhost:27017')  # Modifier l'URL de connexion si n√©cessaire
db = client['mydatabase']  # Remplacez 'mydatabase' par le nom de votre base de donn√©es
session_collection = db['sessions']

app = Flask(__name__)

# Entra√Ænez le chatbot en dehors de l'application Flask
def train_chatbot():
    chatbot = ChatBot("Chatbot")

    trainer = ListTrainer(chatbot)
    trainer.train([
        "Hi",
        "Hi! Welcome to vermeg ü§ó How can I assist you?",
        "Hello",
        "Hello! Welcome to vermeg ü§ó How can I assist you?",
        # Ajoutez d'autres exemples d'entra√Ænement ici
    ])

    return chatbot

chatbot_instance = train_chatbot()

# Liste de mots cl√©s que le chatbot peut reconna√Ætre
keyword_responses = {
    "hi": "Hi! Welcome to vermeg ü§ó How can I assist you?",
    "hello": "Hello! Welcome to vermeg ü§ó How can I assist you?",
    # Ajoutez d'autres mots cl√©s et r√©ponses ici
}

@app.route('/')
def index():
    return render_template('index.html')

# ...

@app.route('/make_choice', methods=['POST'])
def make_choice():
    choice = request.form['choice']

    if choice == 'entreprise':
        response_text = "Choisissez l'une des options ci-dessous :"
    elif choice == 'association':
        response_text = "Merci pour votre r√©ponse, que souhaitez-vous faire ?"
    elif choice == "J'ai un probl√®me":
        response_text = "D'accord, veuillez nous fournir plus de d√©tails sur le probl√®me que vous rencontrez."
    elif choice == "Je souhaite publier une mission pour entreprise":
        response_text = "Super ! Veuillez nous donner plus d'informations sur la mission que vous souhaitez publier."
    elif choice == "Je souhaite √™tre form√© √† l'utilisation de RSETime et des fonctionnalit√©s propos√©es":
        response_text = "Inscrivez vous √† la prochaine d√©mo des assos anim√©e par notre √©quipe üëã <a href=\"#\">d√©mo des assos anim√©e</a>"
    else:
        response_text = "Je n'ai pas compris votre choix."

    return response_text




@app.route('/getresponse', methods=['POST'])
def get_response():
    user_input = request.form['user_input']
    user_id = request.form["user_id"]

    # Charger la session utilisateur depuis MongoDB
    session_data = []
    session_document = session_collection.find_one({'user_id': user_id})

    if session_document:
        session_data = session_document['session_data']

    # Recherchez la r√©ponse pr√©d√©finie
    predefined_response = None
    for item in session_data:
        if item['user_input'].lower() == user_input.lower():
            predefined_response = item['bot_response']
            break

    if predefined_response is not None:
        return predefined_response

    else:
        # Calculer la similarit√© entre l'entr√©e de l'utilisateur et les mots cl√©s
        similarity = max(SequenceMatcher(None, user_input.lower(), keyword).ratio() for keyword in keyword_responses.keys())

        # Si la similarit√© est suffisamment √©lev√©e, accepter la r√©ponse associ√©e au mot cl√©
        if similarity > 0.8:  # Augmentez ce seuil pour r√©duire les correspondances
            return keyword_responses[max(keyword_responses, key=lambda keyword: fuzz.ratio(keyword, user_input.lower()))]

        # Obtenir la r√©ponse du chatbot
        response = chatbot_instance.get_response(user_input)

        # Calculer la similarit√© entre l'entr√©e de l'utilisateur et la r√©ponse du chatbot
        similarity = fuzz.ratio(user_input.lower(), str(response).lower())

        # Si la similarit√© est suffisamment √©lev√©e, accepter la r√©ponse du chatbot
        if similarity > 70 and response.confidence > 0.7:
            response_text = str(response)
        else:
            response_text = user_input  # Utiliser la m√™me question que l'utilisateur a saisie

    # Ajouter l'interaction utilisateur √† la liste session_data
    session_data.append({'user_input': user_input, 'bot_response': response_text})

    # Mettre √† jour ou ins√©rer les donn√©es de session dans MongoDB
    session_collection.update_one(
        {'user_id': user_id},
        {'$set': {'session_data': session_data}},
        upsert=True
    )

    # Convertir les emojis en texte
    response_text = emoji.emojize(response_text)

    return response_text

if __name__ == '__main__':
    app.run(debug=True)